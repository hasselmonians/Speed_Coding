"Temporally binned firing rate versus running speed: Firing rate was fit using a maximum likelihood estimator. The instantaneous running speed was taken from the Kalman velocity, based on displacement in location between each recorded tracking sample (Fyhn et al, 2004). The number of spikes occurring in each video frame (30Hz) was counted. Only frames with instantaneous velocity greater than 2 cm sec-1 and less than the 95th percentile of running speeds were considered, in order to avoid under sampled regions. The firing rate parameter (lambda) was assumed to follow one of two functions of running speed:

Linear: lambda(dach) = b(dach) *v + a(dach)

Saturating exponential: lambda(dach) = k(dach) -m(dach)*e^(-q(dach)*v)

Using a Poisson link function, the underlying firing rate parameter was fit using the ‘mle’ function within the MATLAB statistics toolbox. The log-likelihood for each of these generating functions was calculated and used to determine the F-value and p-score of each fit compared to the uniform fit, as well as a non-nested comparison of the saturating exponential to linear functions. r2 values were calculated as the variance in the instantaneous firing rate explained by the model, divided by the variance in the firing rate" (Hinman et al., 2016, supplementary methods).


Commands:
root = root.FixTime;
ts = CMBHOME.Utils.ContinuizeEpochs(root.cel_ts);
cts = CMBHOME.Utils.ContinuizeEpochs(root.ts);
sp = CMBHOME.Utils.ContinuizeEpochs(root.vel) * root.spatial_scale;
cps = CMBHOME.Utils.ContinuizeEpochs(root.cel_vel) * root.spatial_scale;
temp = fit_speed(cts, root.fs_video, ts, sp, cps, 0);